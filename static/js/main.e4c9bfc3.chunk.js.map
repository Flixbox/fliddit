{"version":3,"sources":["components/Navigation.js","actions/posts.js","components/Posts.js","components/PostCard.js","actions/comments.js","components/CommentSection.js","components/CommentCard.js","components/VoteControls.js","components/EditControls.js","components/AddElementCard.js","actions/categories.js","actions/shared.js","helpers/theme.js","views/App.js","views/Root.js","views/Filtered.js","views/PostDetails.js","views/NotFound.js","serviceWorker.js","reducers/posts.js","reducers/comments.js","reducers/index.js","reducers/categories.js","middleware/index.js","index.js"],"names":["NavigationItem","_ref2","title","subtitle","_ref2$route","route","react_default","a","createElement","react_router_dom","to","replace","ListItem","button","ListItemText","primary","secondary","connect","_ref3","categories","_ref","Drawer","variant","open","List","Navigation_NavigationItem","Divider","map","category","name","key","concat","path","LOAD_POSTS","VOTE_POST","ADD_POST","EDIT_POST","DELETE_POST","vote","id","option","type","payload","request","method","url","data","useStyles","makeStyles","theme","formControl","minWidth","margin","spacing","SortControl","post","sortClick","sorting","fields","Object","keys","Fragment","Typography","field","Posts_SortButton","SortButton","_ref4","fieldName","Button","onClick","_ref5","direction","index_es","icon","renderIcon","_ref6","dispatch","withRouter","match","posts","classes","_useState","useState","_useState2","slicedToArray","setSorting","_useState3","_useState4","body","setBody","_useState5","_useState6","setTitle","_useState7","_useState8","newPostCategory","setNewPostCategory","_useState9","_useState10","retryMode","setRetryMode","submitData","uuid","timestamp","Date","author","user","addPost","then","useEffect","params","shouldDisplay","length","Grid","container","item","xs","Posts_SortControl","sort","aId","bId","b","lg","components_PostCard","assign","linkingCard","Box","mt","components_AddElementCard","onSubmit","onRetry","Input","fullWidth","value","onChange","e","target","placeholder","className","FormControl","InputLabel","htmlFor","Select","inputProps","autoWidth","style","MenuItem","details","display","flexDirection","top","content","padding","width","chip","marginRight","bodyProp","commentCount","deleted","titleProp","voteScore","editMode","setEditMode","reset","Card","voteControls","components_VoteControls","upvote","downvote","component","Link","color","components_EditControls","onSave","editPost","onCancel","onEdit","onTrash","deletePost","CardActions","Chip","avatar","Avatar","label","toLocaleDateString","LOAD_COMMENT_SECTION","VOTE_COMMENT","ADD_COMMENT","EDIT_COMMENT","DELETE_COMMENT","comments","postId","parentId","addComment","comment","components_CommentCard","editControls","marginLeft","parentDeleted","editComment","deleteComment","size","root","alignItems","VoteControls","IconButton","height","EditControls","useTheme","m","palette","error","main","children","LOAD_CATEGORIES","loadInitialData","library","add","faUser","faTag","faComments","faCalendar","faArrowCircleUp","faArrowCircleDown","faChevronDown","faEdit","faTrash","faSave","faWindowClose","faPaperPlane","faSync","createMuiTheme","overrides","MuiDrawer","paper","maxWidth","typography","useNextVariants","@global","textDecoration","nav","paddingLeft","paddingTop","paddingRight","MuiThemeProvider","CssBaseline","components_Navigation","react_router","exact","Root","Filtered","PostDetails","NotFound","components_Posts","filter","loadCommentSection","components_CommentSection","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","result","toConsumableArray","index","splice","combineReducers","arguments","undefined","action","_action$payload$reque","objectSpread","postData","meta","previousAction","_action$payload$reque2","commentData","client","Axios","create","baseURL","server","responseType","headers","Authorization","Accept","composeWithDevTools","applyMiddleware","thunk","axiosMiddleware","store","createStore","reducer","middleware","ReactDOM","render","es","views_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e4c9bfc3.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Drawer, ListItem, List, ListItemText, Divider } from '@material-ui/core'\r\n\r\nconst Navigation = ({ categories }) => {\r\n    return (\r\n        <Drawer variant=\"permanent\" open>\r\n            <List>\r\n                <NavigationItem title=\"FLIDDIT\" subtitle=\"A social platform\" />\r\n                <Divider />\r\n                {categories.map(category => (\r\n                    <NavigationItem\r\n                        title={category.name}\r\n                        key={category.name}\r\n                        route={`/${category.path}`}\r\n                    />\r\n                ))}\r\n            </List>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nconst NavigationItem = ({ title, subtitle, route = '/' }) => {\r\n    return (\r\n        <Link to={route} replace>\r\n            <ListItem button>\r\n                <ListItemText primary={title} secondary={subtitle} />\r\n            </ListItem>\r\n        </Link>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ categories }) => ({ categories })\r\n\r\nexport default connect(mapStateToProps)(Navigation)\r\n","import { v4 as uuid } from 'uuid'\r\n\r\nimport { user } from '../helpers/config'\r\n\r\nexport const LOAD_POSTS = 'LOAD_POSTS'\r\nexport const VOTE_POST = 'VOTE_POST'\r\nexport const ADD_POST = 'ADD_POST'\r\nexport const EDIT_POST = 'EDIT_POST'\r\nexport const DELETE_POST = 'DELETE_POST'\r\n\r\nexport function loadPosts() {\r\n    return {\r\n        type: LOAD_POSTS,\r\n        payload: {\r\n            request: {\r\n                url: '/posts',\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function vote({ id, option }) {\r\n    return {\r\n        type: VOTE_POST,\r\n        payload: {\r\n            request: {\r\n                method: 'POST',\r\n                url: `/posts/${id}`,\r\n                data: {\r\n                    id,\r\n                    option,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function addPost({ title, body, category }) {\r\n    return {\r\n        type: ADD_POST,\r\n        payload: {\r\n            request: {\r\n                method: 'POST',\r\n                url: `/posts`,\r\n                data: {\r\n                    id: uuid(),\r\n                    timestamp: new Date(),\r\n                    title,\r\n                    body,\r\n                    author: user,\r\n                    category,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function editPost({ id, title, body }) {\r\n    return {\r\n        type: EDIT_POST,\r\n        payload: {\r\n            request: {\r\n                method: 'PUT',\r\n                url: `/posts/${id}`,\r\n                data: {\r\n                    id,\r\n                    title,\r\n                    body,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function deletePost({ id }) {\r\n    return {\r\n        type: DELETE_POST,\r\n        payload: {\r\n            request: {\r\n                method: 'DELETE',\r\n                url: `/posts/${id}`,\r\n                data: {\r\n                    id,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Typography,\r\n    Box,\r\n    Input,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport { PostCard, AddElementCard } from '.'\r\nimport { addPost, ADD_POST } from '../actions/posts'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        minWidth: 120,\r\n        margin: theme.spacing(1),\r\n    },\r\n}))\r\n\r\nconst Posts = ({ dispatch, match, posts, categories, category }) => {\r\n    const classes = useStyles()\r\n    const [sorting, setSorting] = useState({\r\n        direction: 'desc',\r\n        field: 'timestamp',\r\n    })\r\n    const [body, setBody] = useState('')\r\n    const [title, setTitle] = useState('')\r\n    const [newPostCategory, setNewPostCategory] = useState(category)\r\n    const reset = () => {\r\n        setTitle('')\r\n        setBody('')\r\n        setNewPostCategory(category)\r\n    }\r\n    const [retryMode, setRetryMode] = useState(false)\r\n    const submitData = () => {\r\n        if (!body) return null\r\n        // Only reset the form if we are successful\r\n        dispatch(addPost({ title, body, category: newPostCategory })).then(({ type }) =>\r\n            type === `${ADD_POST}_SUCCESS` ? reset() : setRetryMode(true)\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!newPostCategory) {\r\n            if (match.params.category) {\r\n                setNewPostCategory(match.params.category)\r\n            } else if (categories[0]) setNewPostCategory(categories[0].name)\r\n        }\r\n    }, [newPostCategory, categories, match.params.category])\r\n\r\n    const postSort = (aId, bId) => {\r\n        const { direction, field } = sorting\r\n        const a = posts[aId]\r\n        const b = posts[bId]\r\n\r\n        if (direction === 'asc') return a[field] < b[field] ? 1 : -1\r\n        return b[field] < a[field] ? 1 : -1\r\n    }\r\n\r\n    /**\r\n     * Sets the new sorting field.\r\n     * If a field is clicked repeatedly, the order is inverted.\r\n     * @param {String} field The name of the field that should be sorted.\r\n     */\r\n    const sortClick = field => {\r\n        setSorting({ field, direction: sorting.direction === 'desc' ? 'asc' : 'desc' })\r\n    }\r\n\r\n    const shouldDisplay = Object.keys(posts).length > 0 ? true : null\r\n\r\n    return (\r\n        <Grid container spacing={1}>\r\n            {posts.length ? (\r\n                <>\r\n                    <Grid item xs={12}>\r\n                        {shouldDisplay && (\r\n                            <SortControl\r\n                                post={posts[Object.keys(posts)[0]]}\r\n                                sortClick={sortClick}\r\n                                sorting={sorting}\r\n                            />\r\n                        )}\r\n                    </Grid>\r\n                    {shouldDisplay &&\r\n                        Object.keys(posts)\r\n                            .sort(postSort)\r\n                            .map(id => (\r\n                                <Grid item xs={12} lg={6} key={id}>\r\n                                    <PostCard {...posts[id]} linkingCard={true} />\r\n                                </Grid>\r\n                            ))}\r\n                </>\r\n            ) : (\r\n                <Typography>No Posts found!</Typography>\r\n            )}\r\n            <Grid item xs={12}>\r\n                <Box mt={1}>\r\n                    <AddElementCard\r\n                        onSubmit={submitData}\r\n                        retryMode={retryMode}\r\n                        onRetry={submitData}\r\n                    >\r\n                        <Input\r\n                            fullWidth\r\n                            value={title}\r\n                            onChange={e => setTitle(e.target.value)}\r\n                            placeholder=\"Give your post a title...\"\r\n                            className={classes.formControl}\r\n                        />\r\n                        <Input\r\n                            fullWidth\r\n                            value={body}\r\n                            onChange={e => setBody(e.target.value)}\r\n                            placeholder=\"Write a post body...\"\r\n                            className={classes.formControl}\r\n                        />\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel htmlFor=\"category\">Category</InputLabel>\r\n                            {newPostCategory && (\r\n                                <Select\r\n                                    value={newPostCategory}\r\n                                    onChange={e => setNewPostCategory(e.target.value)}\r\n                                    inputProps={{\r\n                                        id: 'category',\r\n                                    }}\r\n                                    autoWidth\r\n                                    style={{ minWidth: 'fit-content' }}\r\n                                >\r\n                                    {categories.map(category => (\r\n                                        <MenuItem value={category.path} key={category.path}>\r\n                                            {category.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            )}\r\n                        </FormControl>\r\n                    </AddElementCard>\r\n                </Box>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst SortControl = ({ post, sortClick, sorting }) => {\r\n    const fields = Object.keys(post)\r\n    return (\r\n        <>\r\n            <Typography>Sort by: </Typography>\r\n            {fields.map(field => (\r\n                <SortButton field={field} sortClick={sortClick} key={field} sorting={sorting} />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nconst SortButton = ({ field, sortClick, sorting }) => {\r\n    const fieldName = field\r\n    const renderIcon = ({ direction, field }) =>\r\n        fieldName === field &&\r\n        (direction === 'desc' ? (\r\n            <FontAwesomeIcon icon=\"arrow-circle-down\" />\r\n        ) : (\r\n            <FontAwesomeIcon icon=\"arrow-circle-up\" />\r\n        ))\r\n\r\n    return (\r\n        <Button onClick={() => sortClick(fieldName)}>\r\n            {fieldName} {renderIcon(sorting)}\r\n        </Button>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ categories, dispatch }) => ({ categories, dispatch })\r\n\r\nexport default connect(mapStateToProps)(withRouter(Posts))\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Typography, Card, Chip, Avatar, Box, CardActions, Input } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { VoteControls, EditControls } from '.'\r\nimport { vote, editPost, deletePost } from '../actions/posts'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    top: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    content: {\r\n        padding: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    chip: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}))\r\n\r\nconst PostCard = ({\r\n    dispatch,\r\n    linkingCard,\r\n    author,\r\n    body: bodyProp,\r\n    category,\r\n    commentCount,\r\n    deleted,\r\n    id,\r\n    timestamp,\r\n    title: titleProp,\r\n    voteScore,\r\n}) => {\r\n    const classes = useStyles()\r\n    const [title, setTitle] = useState('Loading title...')\r\n    const [body, setBody] = useState('Loading body...')\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const reset = ({ title, body }) => {\r\n        title && setTitle(title)\r\n        body && setBody(body)\r\n    }\r\n\r\n    useEffect(() => {\r\n        reset({ title: titleProp, body: bodyProp })\r\n    }, [titleProp, bodyProp])\r\n\r\n    if (deleted) return null\r\n    return (\r\n        <Card>\r\n            <Box className={classes.details}>\r\n                <Box className={classes.top}>\r\n                    <Box className={classes.voteControls}>\r\n                        <VoteControls\r\n                            voteScore={voteScore}\r\n                            upvote={() => dispatch(vote({ id, option: 'upVote' }))}\r\n                            downvote={() => dispatch(vote({ id, option: 'downVote' }))}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        className={classes.content}\r\n                        component={linkingCard && !editMode ? Link : Box}\r\n                        to={linkingCard && `/${category}/${id}`}\r\n                    >\r\n                        {!editMode ? (\r\n                            <>\r\n                                <Typography variant=\"h5\">{title}</Typography>\r\n                                <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                                    {body}\r\n                                </Typography>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <Input\r\n                                    value={title}\r\n                                    onChange={e => setTitle(e.target.value)}\r\n                                    fullWidth\r\n                                />\r\n                                <Input\r\n                                    value={body}\r\n                                    onChange={e => setBody(e.target.value)}\r\n                                    fullWidth\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </Box>\r\n                    <EditControls\r\n                        editMode={editMode}\r\n                        onSave={() => {\r\n                            setEditMode(false)\r\n                            dispatch(editPost({ id, title, body }))\r\n                        }}\r\n                        onCancel={() => {\r\n                            setEditMode(false)\r\n                            reset({ title: titleProp, body: bodyProp })\r\n                        }}\r\n                        onEdit={() => setEditMode(true)}\r\n                        onTrash={() => dispatch(deletePost({ id }))}\r\n                    />\r\n                </Box>\r\n                <CardActions>\r\n                    <Chip\r\n                        className={classes.chip}\r\n                        avatar={\r\n                            <Avatar>\r\n                                <FontAwesomeIcon icon=\"user\" />\r\n                            </Avatar>\r\n                        }\r\n                        label={author}\r\n                    />\r\n                    <Chip\r\n                        className={classes.chip}\r\n                        avatar={\r\n                            <Avatar>\r\n                                <FontAwesomeIcon icon=\"tag\" />\r\n                            </Avatar>\r\n                        }\r\n                        label={`${category}`}\r\n                    />\r\n                    <Chip\r\n                        className={classes.chip}\r\n                        avatar={\r\n                            <Avatar>\r\n                                <FontAwesomeIcon icon=\"comments\" />\r\n                            </Avatar>\r\n                        }\r\n                        label={commentCount}\r\n                    />\r\n                    <Chip\r\n                        className={classes.chip}\r\n                        avatar={\r\n                            <Avatar>\r\n                                <FontAwesomeIcon icon=\"calendar\" />\r\n                            </Avatar>\r\n                        }\r\n                        label={new Date(timestamp).toLocaleDateString()}\r\n                    />\r\n                </CardActions>\r\n            </Box>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => dispatch\r\n\r\nexport default connect(mapDispatchToProps)(PostCard)\r\n","import { v4 as uuid } from 'uuid'\r\n\r\nimport { user } from '../helpers/config'\r\n\r\nexport const LOAD_COMMENT_SECTION = 'LOAD_COMMENT_SECTION'\r\nexport const VOTE_COMMENT = 'VOTE_COMMENT'\r\nexport const ADD_COMMENT = 'ADD_COMMENT'\r\nexport const EDIT_COMMENT = 'EDIT_COMMENT'\r\nexport const DELETE_COMMENT = 'DELETE_COMMENT'\r\n\r\nexport function loadCommentSection({ postId }) {\r\n    return {\r\n        type: LOAD_COMMENT_SECTION,\r\n        postId,\r\n        payload: {\r\n            request: {\r\n                url: `/posts/${postId}/comments`,\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function vote({ id, option }) {\r\n    return {\r\n        type: VOTE_COMMENT,\r\n        payload: {\r\n            request: {\r\n                method: 'POST',\r\n                url: `/comments/${id}`,\r\n                data: {\r\n                    id,\r\n                    option,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function addComment({ body, parentId }) {\r\n    return {\r\n        type: ADD_COMMENT,\r\n        payload: {\r\n            request: {\r\n                method: 'POST',\r\n                url: `/comments`,\r\n                data: {\r\n                    id: uuid(),\r\n                    timestamp: new Date(),\r\n                    body,\r\n                    author: user,\r\n                    parentId,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function editComment({ id, body }) {\r\n    return {\r\n        type: EDIT_COMMENT,\r\n        payload: {\r\n            request: {\r\n                method: 'PUT',\r\n                url: `/comments/${id}`,\r\n                data: {\r\n                    id,\r\n                    body,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport function deleteComment({ id }) {\r\n    return {\r\n        type: DELETE_COMMENT,\r\n        payload: {\r\n            request: {\r\n                method: 'DELETE',\r\n                url: `/comments/${id}`,\r\n                data: {\r\n                    id,\r\n                },\r\n            },\r\n        },\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Box, Input } from '@material-ui/core'\r\n\r\nimport { AddElementCard, CommentCard } from '.'\r\nimport { addComment, ADD_COMMENT } from '../actions/comments'\r\n\r\nconst CommentSection = ({ dispatch, comments, postId }) => {\r\n    const [body, setBody] = useState('')\r\n    const [retryMode, setRetryMode] = useState(false)\r\n    const reset = () => setBody('')\r\n    const submitData = () => {\r\n        if (!body) return null\r\n        // Only reset the form if we are successful\r\n        dispatch(addComment({ body, parentId: postId })).then(({ type }) =>\r\n            type === `${ADD_COMMENT}_SUCCESS` ? reset() : setRetryMode(true)\r\n        )\r\n    }\r\n    return (\r\n        <Box>\r\n            {comments.map(comment => (\r\n                <Box mt={1} key={comment.id}>\r\n                    <CommentCard {...comment} />\r\n                </Box>\r\n            ))}\r\n            <Box mt={1}>\r\n                <AddElementCard onSubmit={submitData} retryMode={retryMode} onRetry={submitData}>\r\n                    <Input\r\n                        fullWidth\r\n                        value={body}\r\n                        onChange={e => setBody(e.target.value)}\r\n                        placeholder=\"Write a comment...\"\r\n                    />\r\n                </AddElementCard>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => dispatch\r\n\r\nexport default connect(mapDispatchToProps)(CommentSection)\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Box, Typography, Card, CardActions, Chip, Avatar, Input } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport { VoteControls, EditControls } from '.'\r\nimport { vote, editComment, deleteComment } from '../actions/comments'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    top: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    editControls: {\r\n        marginLeft: 'auto',\r\n    },\r\n    content: {\r\n        padding: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    chip: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}))\r\n\r\nconst CommentCard = ({\r\n    dispatch,\r\n    author,\r\n    body: bodyProp,\r\n    deleted,\r\n    id,\r\n    parentDeleted,\r\n    parentId,\r\n    timestamp,\r\n    voteScore,\r\n}) => {\r\n    const classes = useStyles()\r\n\r\n    const [body, setBody] = useState('Loading body...')\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const reset = ({ body }) => {\r\n        body && setBody(body)\r\n    }\r\n\r\n    useEffect(() => {\r\n        reset({ body: bodyProp })\r\n    }, [bodyProp])\r\n\r\n    if (deleted) return null\r\n    return (\r\n        <Card>\r\n            <Box className={classes.details}>\r\n                <Box className={classes.top}>\r\n                    <Box className={classes.voteControls}>\r\n                        <VoteControls\r\n                            voteScore={voteScore}\r\n                            upvote={() => dispatch(vote({ id, option: 'upVote' }))}\r\n                            downvote={() => dispatch(vote({ id, option: 'downVote' }))}\r\n                        />\r\n                    </Box>\r\n                    <Box className={classes.content}>\r\n                        {!editMode ? (\r\n                            <Typography variant=\"subtitle1\">{body}</Typography>\r\n                        ) : (\r\n                            <Input value={body} onChange={e => setBody(e.target.value)} fullWidth />\r\n                        )}\r\n                    </Box>\r\n                    <EditControls\r\n                        editMode={editMode}\r\n                        onSave={() => {\r\n                            setEditMode(false)\r\n                            dispatch(editComment({ id, body }))\r\n                        }}\r\n                        onCancel={() => {\r\n                            setEditMode(false)\r\n                            reset({ body: bodyProp })\r\n                        }}\r\n                        onEdit={() => setEditMode(true)}\r\n                        onTrash={() => dispatch(deleteComment({ id }))}\r\n                    />\r\n                </Box>\r\n                <CardActions>\r\n                    <Chip\r\n                        className={classes.chip}\r\n                        size=\"small\"\r\n                        avatar={\r\n                            <Avatar>\r\n                                <FontAwesomeIcon icon=\"user\" />\r\n                            </Avatar>\r\n                        }\r\n                        label={author}\r\n                    />\r\n                    <Chip\r\n                        className={classes.chip}\r\n                        size=\"small\"\r\n                        avatar={\r\n                            <Avatar>\r\n                                <FontAwesomeIcon icon=\"calendar\" />\r\n                            </Avatar>\r\n                        }\r\n                        label={new Date(timestamp).toLocaleDateString()}\r\n                    />\r\n                </CardActions>\r\n            </Box>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => dispatch\r\n\r\nexport default connect(mapDispatchToProps)(CommentCard)\r\n","import React from 'react'\r\nimport { Box, IconButton, Typography } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n}))\r\n\r\nconst VoteControls = ({ voteScore, upvote, downvote }) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <IconButton onClick={upvote}>\r\n                <FontAwesomeIcon icon=\"arrow-circle-up\" />\r\n            </IconButton>\r\n            <Typography>{voteScore}</Typography>\r\n            <IconButton onClick={downvote}>\r\n                <FontAwesomeIcon icon=\"arrow-circle-down\" />\r\n            </IconButton>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default VoteControls\r\n","import React from 'react'\r\nimport { Box, Button, Typography } from '@material-ui/core'\r\nimport { makeStyles, useTheme } from '@material-ui/styles'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    editControls: {\r\n        marginLeft: 'auto',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        height: 'fit-content',\r\n    },\r\n    icon: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))\r\n\r\nconst EditControls = ({ editMode, retryMode, onSave, onCancel, onEdit, onTrash, onRetry }) => {\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n    return (\r\n        <Box className={classes.editControls} m={1}>\r\n            {retryMode && (\r\n                <Button onClick={onRetry}>\r\n                    <Typography color=\"error\">Retry?</Typography>\r\n                    <FontAwesomeIcon\r\n                        icon=\"sync\"\r\n                        className={classes.icon}\r\n                        color={theme.palette.error.main}\r\n                    />\r\n                </Button>\r\n            )}\r\n            {editMode ? (\r\n                <>\r\n                    <Button onClick={onSave}>\r\n                        Save\r\n                        <FontAwesomeIcon icon=\"save\" className={classes.icon} />\r\n                    </Button>\r\n                    <Button onClick={onCancel}>\r\n                        Cancel\r\n                        <FontAwesomeIcon icon=\"window-close\" className={classes.icon} />\r\n                    </Button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Button onClick={onEdit}>\r\n                        Edit\r\n                        <FontAwesomeIcon icon=\"edit\" className={classes.icon} />\r\n                    </Button>\r\n                    <Button onClick={onTrash}>\r\n                        Delete\r\n                        <FontAwesomeIcon icon=\"trash\" className={classes.icon} />\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default EditControls\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Box, Card, Button, Typography } from '@material-ui/core'\r\nimport { makeStyles, useTheme } from '@material-ui/styles'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    editControls: {\r\n        marginLeft: 'auto',\r\n    },\r\n    content: {\r\n        padding: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n    icon: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))\r\n\r\nconst AddElementCard = ({ children, retryMode, onSubmit, onRetry }) => {\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n    return (\r\n        <Card>\r\n            <Box className={classes.details}>\r\n                <Box className={classes.content}>{children}</Box>\r\n                <Box className={classes.editControls} m={1}>\r\n                    {retryMode ? (\r\n                        <Button onClick={onRetry}>\r\n                            <Typography color=\"error\">Retry?</Typography>\r\n                            <FontAwesomeIcon\r\n                                icon=\"sync\"\r\n                                className={classes.icon}\r\n                                color={theme.palette.error.main}\r\n                            />\r\n                        </Button>\r\n                    ) : (\r\n                        <Button onClick={onSubmit}>\r\n                            Add\r\n                            <FontAwesomeIcon icon=\"paper-plane\" className={classes.icon} />\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => dispatch\r\n\r\nexport default connect(mapDispatchToProps)(AddElementCard)\r\n","export const LOAD_CATEGORIES = 'LOAD_CATEGORIES'\r\n\r\nexport function loadCategories() {\r\n    return {\r\n        type: LOAD_CATEGORIES,\r\n        payload: {\r\n            request: {\r\n                url: '/categories',\r\n            },\r\n        },\r\n    }\r\n}\r\n","import { loadCategories } from '../actions/categories'\r\nimport { loadPosts } from '../actions/posts'\r\n\r\nexport const loadInitialData = () => {\r\n    return dispatch => {\r\n        dispatch(loadCategories())\r\n        dispatch(loadPosts())\r\n    }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\n\r\nimport {\r\n    faUser,\r\n    faTag,\r\n    faComments,\r\n    faCalendar,\r\n    faArrowCircleUp,\r\n    faArrowCircleDown,\r\n    faChevronDown,\r\n    faEdit,\r\n    faTrash,\r\n    faSave,\r\n    faWindowClose,\r\n    faPaperPlane,\r\n    faSync,\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(\r\n    faUser,\r\n    faTag,\r\n    faComments,\r\n    faCalendar,\r\n    faArrowCircleUp,\r\n    faArrowCircleDown,\r\n    faChevronDown,\r\n    faEdit,\r\n    faTrash,\r\n    faSave,\r\n    faWindowClose,\r\n    faPaperPlane,\r\n    faSync\r\n)\r\n\r\nexport const navWidth = 200\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiDrawer: {\r\n            paper: {\r\n                width: `${navWidth}px`,\r\n                maxWidth: `${navWidth}px`,\r\n            },\r\n        },\r\n    },\r\n    typography: { useNextVariants: true },\r\n})\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { MuiThemeProvider } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport { Grid } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport { Navigation } from '../components'\r\nimport { Root, Filtered, PostDetails, NotFound } from '.'\r\n\r\nimport { loadInitialData } from '../actions/shared'\r\nimport { theme, navWidth } from '../helpers/theme'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    '@global': {\r\n        a: {\r\n            textDecoration: 'none',\r\n            color: 'inherit',\r\n        },\r\n    },\r\n    nav: {\r\n        width: navWidth,\r\n    },\r\n    content: {\r\n        paddingLeft: theme.spacing(1) + navWidth,\r\n        paddingTop: theme.spacing(1),\r\n        paddingRight: theme.spacing(1),\r\n        width: '100%',\r\n    },\r\n}))\r\n\r\n/**\r\n * The main app that contains the entire page.\r\n * This also contains the theme provider.\r\n *\r\n * @class App\r\n * @extends {Component}\r\n */\r\nconst App = ({ dispatch }) => {\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => dispatch(loadInitialData()), [dispatch])\r\n\r\n    return (\r\n        <MuiThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <Router>\r\n                <Grid container>\r\n                    <Grid item className={classes.nav}>\r\n                        <Navigation />\r\n                    </Grid>\r\n                    <Grid item className={classes.content}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={Root} />\r\n                            <Route exact path=\"/:category\" component={Filtered} />\r\n                            <Route exact path=\"/:category/:postId\" component={PostDetails} />\r\n                            <Route path=\"*\" component={NotFound} />\r\n                        </Switch>\r\n                    </Grid>\r\n                </Grid>\r\n            </Router>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => dispatch\r\n\r\nexport default connect(mapDispatchToProps)(App)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Posts } from '../components'\r\n\r\nconst Root = ({ posts }) => {\r\n    return <Posts posts={posts} />\r\n}\r\n\r\nconst mapStateToProps = ({ posts }) => ({ posts })\r\n\r\nexport default connect(mapStateToProps)(Root)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { Posts } from '../components'\r\n\r\nconst Filtered = ({ posts, match }) => {\r\n    const { category } = match.params\r\n\r\n    return (\r\n        <Posts\r\n            posts={posts ? posts.filter(post => post.category === category) : null}\r\n            category={category}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ posts }) => ({ posts })\r\n\r\nexport default connect(mapStateToProps)(withRouter(Filtered))\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { Box, Typography } from '@material-ui/core'\r\n\r\nimport { loadCommentSection } from '../actions/comments'\r\nimport { PostCard, CommentSection } from '../components'\r\n\r\nconst PostDetails = ({ dispatch, match, post, comments }) => {\r\n    const { postId } = match.params\r\n\r\n    useEffect(() => {\r\n        const load = () => dispatch(loadCommentSection({ postId }))\r\n        load()\r\n    }, [postId, dispatch])\r\n\r\n    return (\r\n        <Box>\r\n            {post ? (\r\n                <>\r\n                    <PostCard {...post} />\r\n                    <CommentSection comments={comments} postId={postId} />\r\n                </>\r\n            ) : (\r\n                <Typography>No post found! It may have been deleted.</Typography>\r\n            )}\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ comments, posts, dispatch }, { match }) => {\r\n    const { postId } = match.params\r\n    return {\r\n        comments,\r\n        // Find the first post that matches our ID\r\n        post: posts ? posts.filter(post => post.id === postId)[0] : null,\r\n        dispatch,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(PostDetails))\r\n","import React from 'react'\r\nimport { Typography } from '@material-ui/core'\r\n\r\nconst NotFound = () => (\r\n    <Typography>Not found! Please click one of the buttons in the sidebar to get back.</Typography>\r\n)\r\n\r\nexport default NotFound\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOAD_POSTS, VOTE_POST, EDIT_POST, DELETE_POST, ADD_POST } from '../actions/posts'\r\n\r\nconst deletePost = (state, data) => {\r\n    if (!state) return null\r\n    const { id } = data\r\n    const result = [...state]\r\n    state.map((post, index) => post.id === id && result.splice(index, 1))\r\n    return result\r\n}\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case `${LOAD_POSTS}_SUCCESS`:\r\n            const posts = action.payload.data\r\n            if (!posts) return state\r\n            return posts\r\n        case VOTE_POST: {\r\n            if (!state) return null\r\n            const { id, option } = action.payload.request.data\r\n            return state.map(post => {\r\n                if (post.id === id) {\r\n                    return {\r\n                        ...post,\r\n                        voteScore: option === 'upVote' ? post.voteScore + 1 : post.voteScore - 1,\r\n                    }\r\n                }\r\n                return post\r\n            })\r\n        }\r\n        case ADD_POST: {\r\n            const postData = action.payload.request.data\r\n            return [...state, { ...postData, voteScore: 1 }]\r\n        }\r\n        case `${ADD_POST}_FAIL`:\r\n            return deletePost(state, action.meta.previousAction.payload.request.data)\r\n        case EDIT_POST: {\r\n            if (!state) return null\r\n            const { id, title, body } = action.payload.request.data\r\n            return state.map(post => {\r\n                if (post.id === id) {\r\n                    return {\r\n                        ...post,\r\n                        title,\r\n                        body,\r\n                    }\r\n                }\r\n                return post\r\n            })\r\n        }\r\n        case DELETE_POST:\r\n            return deletePost(state, action.payload.request.data)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    LOAD_COMMENT_SECTION,\r\n    VOTE_COMMENT,\r\n    ADD_COMMENT,\r\n    EDIT_COMMENT,\r\n    DELETE_COMMENT,\r\n} from '../actions/comments'\r\n\r\nconst deleteComment = (state, data) => {\r\n    if (!state) return null\r\n    const { id } = data\r\n    const result = [...state]\r\n    state.map((comment, index) => comment.id === id && result.splice(index, 1))\r\n    return result\r\n}\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case `${LOAD_COMMENT_SECTION}_SUCCESS`:\r\n            const comments = action.payload.data\r\n            if (!comments) return {}\r\n            return comments\r\n        case VOTE_COMMENT:\r\n            if (!state) return null\r\n            const { id, option } = action.payload.request.data\r\n            return state.map(comment => {\r\n                if (comment.id === id) {\r\n                    return {\r\n                        ...comment,\r\n                        voteScore:\r\n                            option === 'upVote' ? comment.voteScore + 1 : comment.voteScore - 1,\r\n                    }\r\n                }\r\n                return comment\r\n            })\r\n        case ADD_COMMENT: {\r\n            const commentData = action.payload.request.data\r\n            return [...state, { ...commentData, voteScore: 1 }]\r\n        }\r\n        case `${ADD_COMMENT}_FAIL`:\r\n            return deleteComment(state, action.meta.previousAction.payload.request.data)\r\n        case EDIT_COMMENT: {\r\n            if (!state) return null\r\n            const { id, body } = action.payload.request.data\r\n            return state.map(comment => {\r\n                if (comment.id === id) {\r\n                    return {\r\n                        ...comment,\r\n                        body,\r\n                    }\r\n                }\r\n                return comment\r\n            })\r\n        }\r\n        case DELETE_COMMENT:\r\n            return deleteComment(state, action.payload.request.data)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport categories from './categories'\r\nimport posts from './posts'\r\nimport comments from './comments'\r\n\r\nexport default combineReducers({ categories, posts, comments })\r\n","import { LOAD_CATEGORIES } from '../actions/categories'\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case `${LOAD_CATEGORIES}_SUCCESS`:\r\n            const categories = action.payload.data.categories\r\n            if (!categories) return state\r\n            return categories\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import thunk from 'redux-thunk'\r\nimport { applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport Axios from 'axios'\r\nimport axiosMiddleware from 'redux-axios-middleware'\r\n\r\nimport { server, user } from '../helpers/config'\r\n\r\nconst client = Axios.create({\r\n    //all axios can be used, shown in axios documentation\r\n    baseURL: `${server}`,\r\n    responseType: 'json',\r\n    headers: {\r\n        Authorization: user,\r\n        Accept: 'application/json',\r\n    },\r\n})\r\n\r\nexport default composeWithDevTools(applyMiddleware(thunk, axiosMiddleware(client)))\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './views'\nimport * as serviceWorker from './serviceWorker'\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers'\nimport middleware from './middleware'\n\nconst store = createStore(reducer, middleware)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}